import os
import re

from aiogram import types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from loguru import logger
from telethon import TelegramClient
from telethon.errors import (SessionPasswordNeededError)

from system.dispatcher import dp, bot, tg_id, tg_hash
from system.dispatcher import router
from utils.sqlipe_utils import writing_account_data_to_the_database

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Pyrogram Client –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
clients = {}


class SessionCreation(StatesGroup):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ StatesGroup –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    ask_number = State()
    ask_code = State()
    ask_2fa = State()


@router.callback_query(F.data == "connection_new_account")
async def auth(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    connect_ac_post = ("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä üì± —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999</b>\n\n"
                       "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start")
    await bot.send_message(callback_query.from_user.id, connect_ac_post, parse_mode="HTML")
    await state.set_state(SessionCreation.ask_number)


@router.message(StateFilter(SessionCreation.ask_number))
async def get_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    phone = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if re.match(r"\d{3}\d{3}\d{4}", phone):
        await bot.send_chat_action(message.from_user.id, action="typing")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        client_id = str(message.from_user.id)
        session_folder = f"accounts/{message.from_user.id}"
        os.makedirs(session_folder, exist_ok=True)
        session_file = os.path.join(session_folder, f"{phone}")

        client = TelegramClient(session_file, api_id=tg_id, api_hash=tg_hash,
                                system_version="4.16.30-vxCUSTOM")
        await client.connect()
        # try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await client.is_user_authorized():
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            sent_code = await client.send_code_request(phone)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(
                client_id=client_id,
                code_hash=sent_code.phone_code_hash,
                phone=phone
            )
            clients[client_id] = client
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ
            await message.answer(f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ: 1-2-3-4-5\n</b>')
            await state.set_state(SessionCreation.ask_code)

    else:
        await message.answer("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
        await state.set_state(SessionCreation.ask_number)


@router.message(StateFilter(SessionCreation.ask_code))
async def get_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    code = message.text.replace('-', '')
    data = await state.get_data()
    client_id = data['client_id']
    client = clients[client_id]

    try:
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä `phone_code` –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º `sign_in(phone, code)`
        signed_in = await client.sign_in(
            phone=data['phone'],
            code=code
        )

        user = await client.get_me()
        await message.answer(f'<b>‚úÖ <i>{user.first_name}</i> –¥–æ–±–∞–≤–ª–µ–Ω</b>')

        cursor, conn = writing_account_data_to_the_database()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
                        INSERT INTO connected_accounts (user_id, phone_number)
                        VALUES (?, ?)
                    """, (message.from_user.id, data['phone']))
        conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        await client.disconnect()
        clients.pop(client_id)
        await state.clear()

    except SessionPasswordNeededError:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å</b>')
        await state.set_state(SessionCreation.ask_2fa)



@router.message(StateFilter(SessionCreation.ask_2fa))
async def get_2fa(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è 2FA –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    await bot.send_chat_action(message.chat.id, action="typing")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "typing"
    data = await state.get_data()

    client_id = data['client_id']
    client = clients.get(client_id)

    try:
        await client.connect()
    except ConnectionError:
        await message.answer("<b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `sign_in` —Å –ø–∞—Ä–æ–ª–µ–º 2FA
        await client.sign_in(password=message.text)

        user = await client.get_me()
        await message.answer(f'<b>‚úÖ <i>{user.first_name}</i> –¥–æ–±–∞–≤–ª–µ–Ω</b>')

        cursor, conn = writing_account_data_to_the_database()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        cursor.execute("SELECT COUNT(*) FROM connected_accounts WHERE user_id = ?", (message.from_user.id,))
        exists = cursor.fetchone()[0]

        if not exists:
            cursor.execute("""
                            INSERT INTO connected_accounts (user_id, phone_number)
                            VALUES (?, ?)
                        """, (message.from_user.id, data['phone']))
            conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        else:
            await message.answer("<b>–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>")

        await client.disconnect()
        clients.pop(client_id)
        await state.clear()

    except Exception as e:
        await message.answer(f"<b>–û—à–∏–±–∫–∞: {str(e)}</b>")
        await client.disconnect()
        clients.pop(client_id)
        await state.clear()




def account_connection_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    dp.message.register(auth)
    dp.message.register(get_number)
    dp.message.register(get_code)
    dp.message.register(get_2fa)
