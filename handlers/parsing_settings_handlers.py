from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import types, F
from keyboards.parsing_keyboards import parsing_keyboards
from system.dispatcher import dp, bot
from system.dispatcher import router
from utils.sqlipe_utils import writing_channel_group_ids_to_database
from aiogram.types import Message


class GroupIdConnection(StatesGroup):
    ask_id_pars_group = State()
    ask_id_pars_post = State()


@router.callback_query(F.data == "post_parsing_settings")
async def parsing_parsing(callback_query: types.CallbackQuery, state: FSMContext):
    parsing_post = ("<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —á–µ–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?</b>\n\n"
                    "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n\n")
    keyboards_parsing = parsing_keyboards()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await bot.send_message(callback_query.from_user.id, parsing_post, reply_markup=keyboards_parsing, parse_mode="HTML")


@router.callback_query(F.data == "connection_parsing")
async def connection_parsing(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ parsing –ø–æ—Å—Ç–æ–≤ –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞"""
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ parsing –ø–æ—Å—Ç—ã")
    await state.set_state(GroupIdConnection.ask_id_pars_group)


@router.message(GroupIdConnection.ask_id_pars_group)
async def parsing_parsing(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –≥—Ä—É–ø–ø—ã / –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    cursor, conn = writing_channel_group_ids_to_database()
    group_ids = message.text.split(',')
    group_ids = ['-{}'.format(id.strip()) if not id.startswith('-') else id.strip() for id in group_ids]
    group_ids_str = ','.join(group_ids)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ ID –≥—Ä—É–ø–ø—ã —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ parsing –ø–æ—Å—Ç—ã
    cursor.execute("INSERT INTO parsing_groups (account_id, group_id_pars) VALUES (?, ?)",
                   (message.from_user.id, group_ids_str))
    conn.commit()

    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—ã")
    await state.set_state(GroupIdConnection.ask_id_pars_post)


@router.message(GroupIdConnection.ask_id_pars_post)
async def post_parsing(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã"""
    group_id_post = message.text.strip()
    cursor, conn = writing_channel_group_ids_to_database()
    cursor.execute("UPDATE parsing_groups SET group_id_post = ? WHERE account_id = ?",
                   (group_id_post, message.from_user.id))
    conn.commit()
    await bot.send_message(message.chat.id,
                           "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üíæ. –ì–æ—Ç–æ–≤–æ –¥–ª—è parsing –∏ –ø–æ—Å—Ç–∏–Ω–≥–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    await state.clear()


def register_handlers_post_parsing_setting():
    dp.message.register(parsing_parsing)
    dp.message.register(post_parsing)
